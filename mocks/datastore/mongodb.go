// Code generated by MockGen. DO NOT EDIT.
// Source: datastore/datastore.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"
	models "testapi/models"

	gomock "github.com/golang/mock/gomock"
)

// MockContactBook is a mock of ContactBook interface.
type MockContactBook struct {
	ctrl     *gomock.Controller
	recorder *MockContactBookMockRecorder
}

// MockContactBookMockRecorder is the mock recorder for MockContactBook.
type MockContactBookMockRecorder struct {
	mock *MockContactBook
}

// NewMockContactBook creates a new mock instance.
func NewMockContactBook(ctrl *gomock.Controller) *MockContactBook {
	mock := &MockContactBook{ctrl: ctrl}
	mock.recorder = &MockContactBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactBook) EXPECT() *MockContactBookMockRecorder {
	return m.recorder
}

// AddContact mocks base method.
func (m *MockContactBook) AddContact(contact *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContact indicates an expected call of AddContact.
func (mr *MockContactBookMockRecorder) AddContact(contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockContactBook)(nil).AddContact), contact)
}

// DeleteContact mocks base method.
func (m *MockContactBook) DeleteContact(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockContactBookMockRecorder) DeleteContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockContactBook)(nil).DeleteContact), arg0)
}

// GetContacts mocks base method.
func (m *MockContactBook) GetContacts() ([]models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts")
	ret0, _ := ret[0].([]models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockContactBookMockRecorder) GetContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockContactBook)(nil).GetContacts))
}

// InsertManyContacts mocks base method.
func (m *MockContactBook) InsertManyContacts(arg0 []models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertManyContacts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertManyContacts indicates an expected call of InsertManyContacts.
func (mr *MockContactBookMockRecorder) InsertManyContacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertManyContacts", reflect.TypeOf((*MockContactBook)(nil).InsertManyContacts), arg0)
}

// UpdateContact mocks base method.
func (m *MockContactBook) UpdateContact(arg0 *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockContactBookMockRecorder) UpdateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockContactBook)(nil).UpdateContact), arg0)
}
